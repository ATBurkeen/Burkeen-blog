-- Enable the necessary extensions
create extension if not exists "uuid-ossp";
create extension if not exists "pg_trgm";

-- Create tables
create table public.profiles (
  id uuid references auth.users on delete cascade not null primary key,
  email text unique not null,
  full_name text,
  avatar_url text,
  role text not null default 'user' check (role in ('admin', 'user')),
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.posts (
  id bigint generated by default as identity primary key,
  title text not null,
  slug text unique not null,
  content text not null,
  description text,
  cover_image text,
  published boolean default false not null,
  author_id uuid references public.profiles(id) on delete cascade not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.tags (
  id bigint generated by default as identity primary key,
  name text not null,
  slug text unique not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.post_tags (
  post_id bigint references public.posts(id) on delete cascade not null,
  tag_id bigint references public.tags(id) on delete cascade not null,
  primary key (post_id, tag_id)
);

create table public.attachments (
  id bigint generated by default as identity primary key,
  post_id bigint references public.posts(id) on delete cascade not null,
  file_name text not null,
  file_type text not null check (file_type in ('pdf', 'docx')),
  file_size bigint not null,
  file_path text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create indexes
create index posts_author_id_idx on public.posts(author_id);
create index posts_published_idx on public.posts(published);
create index post_tags_post_id_idx on public.post_tags(post_id);
create index post_tags_tag_id_idx on public.post_tags(tag_id);
create index attachments_post_id_idx on public.attachments(post_id);

-- Enable full text search
alter table public.posts add column search_vector tsvector
  generated always as (
    setweight(to_tsvector('english', coalesce(title, '')), 'A') ||
    setweight(to_tsvector('english', coalesce(description, '')), 'B') ||
    setweight(to_tsvector('english', coalesce(content, '')), 'C')
  ) stored;

create index posts_search_idx on public.posts using gin(search_vector);

-- Set up Row Level Security (RLS)
alter table public.profiles enable row level security;
alter table public.posts enable row level security;
alter table public.tags enable row level security;
alter table public.post_tags enable row level security;
alter table public.attachments enable row level security;

-- Create policies
create policy "Public profiles are viewable by everyone"
  on public.profiles for select
  using (true);

create policy "Users can update own profile"
  on public.profiles for update
  using (auth.uid() = id);

create policy "Published posts are viewable by everyone"
  on public.posts for select
  using (published = true);

create policy "Posts are editable by admin users"
  on public.posts for all
  using (
    exists (
      select 1 from public.profiles
      where id = auth.uid()
      and role = 'admin'
    )
  );

create policy "Tags are viewable by everyone"
  on public.tags for select
  using (true);

create policy "Tags are editable by admin users"
  on public.tags for all
  using (
    exists (
      select 1 from public.profiles
      where id = auth.uid()
      and role = 'admin'
    )
  );

create policy "Post tags are viewable by everyone"
  on public.post_tags for select
  using (true);

create policy "Post tags are editable by admin users"
  on public.post_tags for all
  using (
    exists (
      select 1 from public.profiles
      where id = auth.uid()
      and role = 'admin'
    )
  );

create policy "Attachments are viewable by everyone"
  on public.attachments for select
  using (true);

create policy "Attachments are editable by admin users"
  on public.attachments for all
  using (
    exists (
      select 1 from public.profiles
      where id = auth.uid()
      and role = 'admin'
    )
  );

-- Create functions
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, email, role)
  values (new.id, new.email, 'user');
  return new;
end;
$$ language plpgsql security definer;

-- Create triggers
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user(); 